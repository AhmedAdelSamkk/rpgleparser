directives() ::= <<DIR_NOT: [nN][oO][tT];
DIR_DEFINED: [dD][eE][fF][iI][nN][eE][dD];
DIR_FREE: {_input.LA(-1)=='/'}? [fF][rR][eE][eE] -> pushMode(SKIP_REMAINING_WS);
DIR_ENDFREE: {_input.LA(-1)=='/'}? [eE][nN][dD] '-' [fF][rR][eE][eE] -> pushMode(SKIP_REMAINING_WS);
DIR_TITLE:{_input.LA(-1)=='/'}? ([tT][iI][tT][lL][eE]);
DIR_EJECT: {_input.LA(-1)=='/'}? [eE][jJ][eE][cC][tT] -> pushMode(SKIP_REMAINING_WS);
DIR_SPACE: {_input.LA(-1)=='/'}? [sS][pP][aA][cC][eE];
DIR_SET: {_input.LA(-1)=='/'}?  [sS][eE][tT];
DIR_RESTORE: {_input.LA(-1)=='/'}? [rR][eE][sS][tT][oO][rR][eE];
DIR_COPY: {_input.LA(-1)=='/'}? [cC][oO][pP][yY];
DIR_INCLUDE: {_input.LA(-1)=='/'}? [iI][nN][cC][lL][uU][dD][eE];
DIR_EOF: {_input.LA(-1)=='/'}? [eE][oO][fF];
DIR_DEFINE: {_input.LA(-1)=='/'}? ([dD][eE][fF][iI][nN][eE]);
DIR_UNDEFINE: {_input.LA(-1)=='/'}? ([uU][nN][dD][eE][fF][iI][nN][eE]);
DIR_IF: {_input.LA(-1)=='/'}? ([iI][fF]);
DIR_ELSE: {_input.LA(-1)=='/'}? ([eE][lL][sS][eE]);
DIR_ELSEIF: {_input.LA(-1)=='/'}? ([eE][lL][sS][eE][iI][fF]);
DIR_ENDIF: {_input.LA(-1)=='/'}? ([eE][nN][dD][iI][fF]);
DIR_Number: NUMBER -> type(NUMBER);
DIR_WhiteSpace: [ ] -> type(WS),skip;
DIR_OtherText : ~[/'"\r\n \t,()]+ ;
DIR_Comma : [,] -> skip;
DIR_Slash : [/] ;
DIR_OpenParen: [(] -> type(OPEN_PAREN);
DIR_CloseParen: [)] -> type(CLOSE_PAREN);
DIR_DblStringLiteralStart: ["] -> pushMode(InDoubleStringMode),type(StringLiteralStart) ;
DIR_StringLiteralStart: ['] -> pushMode(InStringMode),type(StringLiteralStart) ;
DIR_EOL : [ ]* NEWLINE -> type(EOL),popMode;
>>